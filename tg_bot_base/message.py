from abc import ABC, abstractmethod

class SentMessage(ABC):
    def __init__(self): ...
    
    @abstractmethod
    async def edit(self, user_id: int): ...
    
    @abstractmethod
    async def delete(self, user_id: int): ...
    
    @abstractmethod
    def __eq__(self, other: "Message"): ...
    
    @abstractmethod
    def clone(self): ...

class Message(ABC):
    def __init__(self): ...

    @abstractmethod
    async def send(self, user_id: int): ...
    
    @abstractmethod
    def __eq__(self, other: "Message"): ...
    
    @abstractmethod
    def clone(self): ...



class AudioMessage(Message): ...

class DocumentMessage(Message): ...

class SimpleMessage(Message): ...

class PhotoMessage(Message): ...

class VideoMessage(Message): ...

class VideoNoteMessage(Message): ...


class SentAudioMessage(Message): ...

class SentDocumentMessage(Message): ...

class SentSimpleMessage(Message): ...

class SentPhotoMessage(Message): ...

class SentVideoMessage(Message): ...

class SentVideoNoteMessage(Message): ...
